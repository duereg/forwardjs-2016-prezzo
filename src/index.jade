doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title ES2015 today
    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article.us-hero

      section(data-bespoke-hash='javascript-today')
        h1 JavaScript today
        h3 Where we are, where we're going, what's next
        h3 Powered by <a href="http://tech.opentable.com/">OpenTable Engineering</a>
        h4 Matt Blair
        h5 Principal Software Engineer, Search Platform
        h5 mblair@opentable.com
        h5 &nbsp;
        h5 http://blog.mattblair.co/forwardjs-2016-prezzo
        h5 https://github.com/duereg/forwardjs-2016-prezzo

      section(data-bespoke-hash='browsers')
        h2 Where we are - Browsers
        ul
          li
            span.date Chrome 49+, Opera 36+
            span.event 91%
          li
            span.date FF 45
            span.event 85%
          li
            span.date Edge 13
            span.event 83%
          li
            span.date Safari 9
            span.event 54%

      section(data-bespoke-hash='transpilers')
        h2 Where we are - Transpilers
        ul
          li
            span.date Babel 6.4.6
            span.event 76%
          li
            span.date Traceur 0.0.102
            span.event 59%
          li
            span.date TypeScript 1.7.5
            span.event 56%
          li
            span.date Closure v20160125
            span.event 31%
          li
            span.date JSX 0.9.89
            span.event 20%

      section(data-bespoke-hash='going-forward')
        h2 Examples

      section(data-bespoke-hash='what-works-everywhere-syntax')
        h2 What Works Everywhere?
        h3 Syntax
        ul
          li * Some environments require a 'use strict' statement
          li
            b let
          li
            b const
          li Arrow Functions
          li Object Literal Extensions
          li String Templates

      section(data-bespoke-hash='let')
        h2 let
        pre
          code.language-javascript.
            function varTest() {
              var x = 31;
              if (true) {
                var x = 71;  // same variable!
                console.log(x);  // 71
              }
              console.log(x);  // 71
            }

      section(data-bespoke-hash='let-2')
        h2 let
        pre
          code.language-javascript.
            function letTest() {
              let x = 31;
              if (true) {
                let x = 71;  // different variable
                console.log(x);  // 71
              }
              console.log(x);  // 31
            }

      section(data-bespoke-hash='let-3')
        h2 let errors
        pre
          code.language-javascript.
            if (x) {
              let foo;
              let foo; // TypeError thrown.
            }

            function do_something() {
              console.log(foo); // ReferenceError
              let foo = 2;
            }

      //- five minutes w/o slides
      section(data-bespoke-hash='const')
        h2 const
        pre
          code.language-javascript.
            const MY_FAV = 7;
            MY_FAV = 20; //fails FF, Chrome, not Safari

            console.log("my favorite number is: " + MY_FAV); // 7

            const MY_FAV = 20; //throws
            var MY_FAV = 20; //throws

            console.log("my favorite number is " + MY_FAV); // 7

      section(data-bespoke-hash='const-2')
        h2 const
        pre
          code.language-javascript.
            const FOO; // SyntaxError: missing = in const declaration
            const MY_OBJECT = {"key": "value"}; // works

            //fails FF, Chrome, not Safari
            MY_OBJECT = {"OTHER_KEY": "value"};

            // Object attributes are not protected
            MY_OBJECT.key = "otherValue";

      //- 6 minutes
      section(data-bespoke-hash='arrow-functions')
        h2 Arrow Functions
        pre
          code.language-javascript.
            // Arrow functions are all bound to this
            (a1, a2, aN) => { foos } // function(a1, a2, aN) { foos }
            // implicit return
            (a1, a2, aN) => a1 + a2  // function(a1, a2, aN) { return a1 + a2 }

            // Parentheses are optional when there's one parameter
            (singleParam) => { statements }
            singleParam => { statements }

      section(data-bespoke-hash='object-literals')
        h2 Object Literal Extensions
        pre
          code.language-javascript.
            var a = 103, bar = 'foo'
            var obj = {
              a: a,
              m: function(z) {return z + this.a},
            }
            obj[bar] = 104 // obj.foo
            Object.defineProperty(obj, bar + a, {
              get: function() {return this.a() },
            }) //obj.foo103

      section(data-bespoke-hash='object-literals-2')
        h2 Object Literal Extensions
        pre
          code.language-javascript.
            var a = 103, bar = 'foo'

            var obj = {
              a, // a:a, object shorthand
              m(z) {return z + this.a}, // function shorthand
              [bar]: 104, // Computed Property Names
              get [bar + a]() {return this.a}
            }

      section(data-bespoke-hash='string templates')
        h2 String Templating
        pre
          code.language-javascript.
            console.log("string text line 1\n string text line 2");
            // is equal to
            console.log(`string text line 1
            string text line 2`);

            var a = 5, b = 10;
            console.log(`Fifteen is ${a + b} and\nnot ${2 * a + b}.`);

      // 10 minutes at this point
      section(data-bespoke-hash='what-works-everywhere-ds')
        h2 What Works Everywhere?
        h3 Data Structures
        ul
          li Set
          li Map
          li WeakSet
          li WeakMap
          li Symbol
          li Promise

      section(data-bespoke-hash='set')
        h2 Set
        pre
          code.language-javascript.
            let s = new Set()
            s.add("hello").add("goodbye").add("hello")
            s.size === 2
            s.has("hello") === true
            for (let key of s.values()) // insertion order
              console.log(key)

      section(data-bespoke-hash='map')
        h2 Map
        pre
          code.language-javascript.
            let s = { foo: 'bar' }
            let m = new Map()
            m.set("hello", 42)
            m.set(s, 34)
            m.get(s) === 34
            m.size === 2
            for (let [ key, val ] of m.entries())
                console.log(key + " = " + val)

      section(data-bespoke-hash='weakset')
        h2 WeakSet
        pre
          code.language-javascript.
            let thingToDelete = {};
            let ws = new WeakSet()
            ws.set(thingToDelete) //cannot be primitive
            ws.has(thingToDelete) === true
            thingToDelete = null;
            ws.has(thingToDelete) === false

      section(data-bespoke-hash='weakmap')
        h2 WeakMap
        pre
          code.language-javascript.
            let thingToDelete = {};
            let wm = new WeakMap()
            wm.set(thingToDelete, 42) //cannot be primitive
            wm.get(thingToDelete) === 42
            thingToDelete = null;
            wm.has(thingToDelete) === false
            wm.get(thingToDelete) === undefined

      section(data-bespoke-hash='symbol')
        h2 Symbol
        pre
          code.language-javascript.
            Symbol("foo") !== Symbol("foo") // every Symbol is unique
            const foo = Symbol()
            const bar = Symbol()
            typeof foo === "symbol"
            typeof bar === "symbol"
            let obj = {}
            obj[foo] = "foo"
            obj[bar] = "bar"
            JSON.stringify(obj) // {}
            Object.keys(obj) // []

      section(data-bespoke-hash='promise')
        h2 Promise
        ul
          li <img src="images/promises.png" width="400px" />

      // 16 minutes, rushing, not going over code
      section(data-bespoke-hash='what-else')
        h2 What else is there?
        ul
          li class
          li super
          li generators

      section(data-bespoke-hash='what-am-I-missing')
        h2 What are we missing?
        ul
          li Proxies
          li Destructuring
          li Subclassing Array, Function, etc

      section(data-bespoke-hash='es6-options')
        h2 What are my options?
        ul
          li
            b Client SPA in Chrome 49+
            ul
              li 91% of ES6
              li Proxies, Destructuring, subclassing
              li no module import/export

          li
            b IofT Application using XS6 Runtime
            ul
              li 97% of ES6
              li limited to Kinoma hardware

          li
            b Node 4/5 App, Transpiled with Babel
            ul
              li 75% of ES6
              li Destructuring, Module Import/Export
              li ES7 support (async, await)
              li JSX, TypeScript, Flow, etc

      section(data-bespoke-hash='thanks')
        h2 Thanks!
        h3 For more information:
        ul
          li http://kangax.github.io/compat-table/es6/
          li http://es6-features.org/
          li http://blog.mattblair.co/forwardjs-2016-prezzo
          li https://github.com/duereg/forwardjs-2016-prezzo

    //- div.logo

    script(src='build/build.js')
